docker-build:
  # Use the official docker image.
  image: docker:cli
  stage: docker-build
  services:
    - docker:dind
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  before_script:
    - docker login -u "${CI_REGISTRY_USER}" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - echo "DADATA_API_KEY=${DADATA_API_KEY}" > .env
    - echo "DADATA_API_SECRET=${DADATA_API_SECRET}" >> .env
    - echo "YANDEX_MAP_KEY=${YANDEX_MAP_KEY}" >> .env
    - echo "DIGINETICA_API_KEY=${DIGINETICA_API_KEY}" >> .env
    - echo "HOST=${HOST}" >> .env
    - echo "POST=${POST}" >> .env
    - echo "NEXT_BASE_URL=${NEXT_BASE_URL}" >> .env
    - echo "NEXT_PUBLIC_DOMAIN=${NEXT_PUBLIC_DOMAIN}" >> .env
    - echo "BACKEND_API_URL=${BACKEND_API_URL}" >> .env
    - echo "ONAIR_STREAM_URL=$ONAIR_STREAM_URL}" >> .env
    - cat .env
  # All branches are tagged with $DOCKER_IMAGE_NAME (defaults to commit ref slug)
  # Default branch is also tagged with `latest`
  script:
    - docker build --pull -t "$DOCKER_IMAGE_NAME" "$DOCKERFILE_PATH"
    - docker push "$DOCKER_IMAGE_NAME"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
        docker push "$CI_REGISTRY_IMAGE:latest"
      fi
  # Run this job in a branch where a Dockerfile exists
  tags:
    - production
  cache:
    paths:
      - .docker/
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
  # rules:
  #   - if: $CI_COMMIT_BRANCH
  #     exists:
  #       - Dockerfile